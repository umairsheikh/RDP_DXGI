<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Gma.System.MouseKeyHook</name>
    </assembly>
    <members>
        <member name="T:Gma.System.MouseKeyHook.Implementation.KeyboardState">
            <summary>
                Contains a snapshot of a keyboard state at certain moment and provides methods
                of querying whether specific keys are pressed or locked.
            </summary>
            <remarks>
                This class is basically a managed wrapper of GetKeyboardState API function
                http://msdn.microsoft.com/en-us/library/ms646299
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.Implementation.KeyboardState.GetCurrent">
            <summary>
                Makes a snapshot of a keyboard state to the moment of call and returns an
                instance of <see cref="T:Gma.System.MouseKeyHook.Implementation.KeyboardState" /> class.
            </summary>
            <returns>An instance of <see cref="T:Gma.System.MouseKeyHook.Implementation.KeyboardState" /> class representing a snapshot of keyboard state at certain moment.</returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.Implementation.KeyboardState.IsDown(System.Windows.Forms.Keys)">
            <summary>
                Indicates whether specified key was down at the moment when snapshot was created or not.
            </summary>
            <param name="key">Key (corresponds to the virtual code of the key)</param>
            <returns><b>true</b> if key was down, <b>false</b> - if key was up.</returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.Implementation.KeyboardState.IsToggled(System.Windows.Forms.Keys)">
            <summary>
                Indicate weather specified key was toggled at the moment when snapshot was created or not.
            </summary>
            <param name="key">Key (corresponds to the virtual code of the key)</param>
            <returns>
                <b>true</b> if toggle key like (CapsLock, NumLocke, etc.) was on. <b>false</b> if it was off.
                Ordinal (non toggle) keys return always false.
            </returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.Implementation.KeyboardState.AreAllDown(System.Collections.Generic.IEnumerable{System.Windows.Forms.Keys})">
            <summary>
                Indicates weather every of specified keys were down at the moment when snapshot was created.
                The method returns false if even one of them was up.
            </summary>
            <param name="keys">Keys to verify whether they were down or not.</param>
            <returns><b>true</b> - all were down. <b>false</b> - at least one was up.</returns>
        </member>
        <member name="T:Gma.System.MouseKeyHook.Hook">
            <summary>
                This is the class to start with.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.Hook.AppEvents">
            <summary>
                Here you find all application wide events. Both mouse and keyboard.
            </summary>
            <returns>
                Returned instance is used for event subscriptions.
                You can refetch it (you will get the same instance anyway).
            </returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.Hook.GlobalEvents">
            <summary>
                Here you find all application wide events. Both mouse and keyboard.
            </summary>
            <returns>
                Returned instance is used for event subscriptions.
                You can refetch it (you will get the same instance anyway).
            </returns>
        </member>
        <member name="T:Gma.System.MouseKeyHook.IKeyboardMouseEvents">
            <summary>
                Provides keyboard and mouse events.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.IMouseEvents">
            <summary>
                Provides all mouse events.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseMove">
            <summary>
                Occurs when the mouse pointer is moved.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseMoveExt">
            <summary>
                Occurs when the mouse pointer is moved.
            </summary>
            <remarks>
                This event provides extended arguments of type <see cref="T:System.Windows.Forms.MouseEventArgs" /> enabling you to
                suppress further processing of mouse movement in other applications.
            </remarks>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseClick">
            <summary>
                Occurs when a click was performed by the mouse.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseDown">
            <summary>
                Occurs when the mouse a mouse button is pressed.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseDownExt">
            <summary>
                Occurs when the mouse a mouse button is pressed.
            </summary>
            <remarks>
                This event provides extended arguments of type <see cref="T:System.Windows.Forms.MouseEventArgs" /> enabling you to
                suppress further processing of mouse click in other applications.
            </remarks>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseUp">
            <summary>
                Occurs when a mouse button is released.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseUpExt">
            <summary>
            Occurs when a mouse button is released.
            </summary>
            <remarks>
                This event provides extended arguments of type <see cref="T:System.Windows.Forms.MouseEventArgs" /> enabling you to
                suppress further processing of mouse click in other applications.
            </remarks>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseWheel">
            <summary>
                Occurs when the mouse wheel moves.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseWheelExt">
            <summary>
                Occurs when the mouse wheel moves.
            </summary>
            <remarks>
                This event provides extended arguments of type <see cref="T:System.Windows.Forms.MouseEventArgs" /> enabling you to
                suppress further processing of mouse wheel moves in other applications.
            </remarks>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseDoubleClick">
            <summary>
                Occurs when a mouse button is double-clicked.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseDragStarted">
            <summary>
                Occurs when a drag event has started (left button held down whilst moving more than the system drag threshold).
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseDragStartedExt">
            <summary>
                Occurs when a drag event has started (left button held down whilst moving more than the system drag threshold).
            </summary>
            <remarks>
                This event provides extended arguments of type <see cref="T:System.Windows.Forms.MouseEventArgs" /> enabling you to
                suppress further processing of mouse movement in other applications.
            </remarks>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseDragFinished">
            <summary>
                Occurs when a drag event has completed.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IMouseEvents.MouseDragFinishedExt">
            <summary>
                Occurs when a drag event has completed.
            </summary>
            <remarks>
                This event provides extended arguments of type <see cref="T:System.Windows.Forms.MouseEventArgs" /> enabling you to
                suppress further processing of mouse movement in other applications.
            </remarks>
        </member>
        <member name="T:Gma.System.MouseKeyHook.IKeyboardEvents">
            <summary>
                Provides keyboard events
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IKeyboardEvents.KeyDown">
            <summary>
                Occurs when a key is pressed.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IKeyboardEvents.KeyPress">
            <summary>
                Occurs when a key is pressed.
            </summary>
            <remarks>
                Key events occur in the following order:
                <list type="number">
                    <item>KeyDown</item>
                    <item>KeyPress</item>
                    <item>KeyUp</item>
                </list>
                The KeyPress event is not raised by non-character keys; however, the non-character keys do raise the KeyDown and
                KeyUp events.
                Use the KeyChar property to sample keystrokes at run time and to consume or modify a subset of common keystrokes.
                To handle keyboard events only in your application and not enable other applications to receive keyboard events,
                set the <see cref="P:System.Windows.Forms.KeyPressEventArgs.Handled" /> property in your form's KeyPress event-handling method to
                <b>true</b>.
            </remarks>
        </member>
        <member name="E:Gma.System.MouseKeyHook.IKeyboardEvents.KeyUp">
            <summary>
                Occurs when a key is released.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.KeyPressEventArgsExt">
            <summary>
                Provides extended data for the <see cref='E:Gma.System.MouseKeyHook.Implementation.KeyListener.KeyPress' /> event.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.KeyPressEventArgsExt.#ctor(System.Char)">
            <summary>
                Initializes a new instance of the <see cref='T:Gma.System.MouseKeyHook.KeyPressEventArgsExt' /> class.
            </summary>
            <param name="keyChar">
                Character corresponding to the key pressed. 0 char if represents a system or functional non char
                key.
            </param>
        </member>
        <member name="P:Gma.System.MouseKeyHook.KeyPressEventArgsExt.IsNonChar">
            <summary>
                True if represents a system or functional non char key.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.KeyPressEventArgsExt.Timestamp">
            <summary>
                The system tick count of when the event occurred.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.WinApi.AppMouseStruct">
            <summary>
                The AppMouseStruct structure contains information about a application-level mouse input event.
            </summary>
            <remarks>
                See full documentation at http://globalmousekeyhook.codeplex.com/wikipage?title=MouseStruct
            </remarks>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.AppMouseStruct.Point">
            <summary>
                Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.AppMouseStruct.MouseData_x86">
            <summary>
                Specifies information associated with the message.
            </summary>
            <remarks>
                The possible values are:
                <list type="bullet">
                    <item>
                        <description>0 - No Information</description>
                    </item>
                    <item>
                        <description>1 - X-Button1 Click</description>
                    </item>
                    <item>
                        <description>2 - X-Button2 Click</description>
                    </item>
                    <item>
                        <description>120 - Mouse Scroll Away from User</description>
                    </item>
                    <item>
                        <description>-120 - Mouse Scroll Toward User</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.AppMouseStruct.ToMouseStruct">
            <summary>
                Converts the current <see cref="T:Gma.System.MouseKeyHook.WinApi.AppMouseStruct" /> into a <see cref="T:Gma.System.MouseKeyHook.WinApi.MouseStruct" />.
            </summary>
            <returns></returns>
            <remarks>
                The AppMouseStruct does not have a timestamp, thus one is generated at the time of this call.
            </remarks>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.HookIds.WH_MOUSE">
            <summary>
                Installs a hook procedure that monitors mouse messages. For more information, see the MouseProc hook procedure.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.HookIds.WH_KEYBOARD">
            <summary>
                Installs a hook procedure that monitors keystroke messages. For more information, see the KeyboardProc hook
                procedure.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.HookIds.WH_MOUSE_LL">
            <summary>
                Windows NT/2000/XP/Vista/7: Installs a hook procedure that monitors low-level mouse input events.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.HookIds.WH_KEYBOARD_LL">
            <summary>
                Windows NT/2000/XP/Vista/7: Installs a hook procedure that monitors low-level keyboard  input events.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.HookNativeMethods.CallNextHookEx(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
                The CallNextHookEx function passes the hook information to the next hook procedure in the current hook chain.
                A hook procedure can call this function either before or after processing the hook information.
            </summary>
            <param name="idHook">This parameter is ignored.</param>
            <param name="nCode">[in] Specifies the hook code passed to the current hook procedure.</param>
            <param name="wParam">[in] Specifies the wParam value passed to the current hook procedure.</param>
            <param name="lParam">[in] Specifies the lParam value passed to the current hook procedure.</param>
            <returns>This value is returned by the next hook procedure in the chain.</returns>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.HookNativeMethods.SetWindowsHookEx(System.Int32,Gma.System.MouseKeyHook.WinApi.HookProcedure,System.IntPtr,System.Int32)">
            <summary>
                The SetWindowsHookEx function installs an application-defined hook procedure into a hook chain.
                You would install a hook procedure to monitor the system for certain types of events. These events
                are associated either with a specific thread or with all threads in the same desktop as the calling thread.
            </summary>
            <param name="idHook">
                [in] Specifies the type of hook procedure to be installed. This parameter can be one of the following values.
            </param>
            <param name="lpfn">
                [in] Pointer to the hook procedure. If the dwThreadId parameter is zero or specifies the identifier of a
                thread created by a different process, the lpfn parameter must point to a hook procedure in a dynamic-link
                library (DLL). Otherwise, lpfn can point to a hook procedure in the code associated with the current process.
            </param>
            <param name="hMod">
                [in] Handle to the DLL containing the hook procedure pointed to by the lpfn parameter.
                The hMod parameter must be set to NULL if the dwThreadId parameter specifies a thread created by
                the current process and if the hook procedure is within the code associated with the current process.
            </param>
            <param name="dwThreadId">
                [in] Specifies the identifier of the thread with which the hook procedure is to be associated.
                If this parameter is zero, the hook procedure is associated with all existing threads running in the
                same desktop as the calling thread.
            </param>
            <returns>
                If the function succeeds, the return value is the handle to the hook procedure.
                If the function fails, the return value is NULL. To get extended error information, call GetLastError.
            </returns>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.HookNativeMethods.UnhookWindowsHookEx(System.IntPtr)">
            <summary>
                The UnhookWindowsHookEx function removes a hook procedure installed in a hook chain by the SetWindowsHookEx
                function.
            </summary>
            <param name="idHook">
                [in] Handle to the hook to be removed. This parameter is a hook handle obtained by a previous call to
                SetWindowsHookEx.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
                If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/setwindowshookex.asp
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.HotkeysNativeMethods.RegisterHotKey(System.IntPtr,System.Int32,System.Int32,System.Int32)">
            <summary>
                Defines a system-wide hot key.
            </summary>
            <param name="hwnd">
                A handle to the window that will receive WM_HOTKEY messages generated by the hot key. If this parameter is NULL,
                WM_HOTKEY messages are posted to the message queue of the calling thread and must be processed in the message loop.
            </param>
            <param name="id">
                The identifier of the hot key. If the hWnd parameter is NULL, then the hot key is associated with the current
                thread rather than with a particular window. If a hot key already exists with the same hWnd and id parameters, see
                Remarks for the action taken.
            </param>
            <param name="fsModifiers">
                The keys that must be pressed in combination with the key specified by the uVirtKey parameter in order to generate
                the WM_HOTKEY message. The fsModifiers parameter can be a combination of the following values.
            </param>
            <param name="vk">
                The virtual-key code of the hot key. See Virtual Key Codes.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
                If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.HotkeysNativeMethods.UnregisterHotKey(System.IntPtr,System.Int32)">
            <summary>
                Frees a hot key previously registered by the calling thread.
            </summary>
            <param name="hwnd">
                A handle to the window associated with the hot key to be freed. This parameter should be NULL if the hot key is not
                associated with a window.
            </param>
            <param name="id">
                The identifier of the hot key to be freed.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
                If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.MouseNativeMethods.GetDoubleClickTime">
            <summary>
                The GetDoubleClickTime function retrieves the current double-click time for the mouse. A double-click is a series
                of two clicks of the
                mouse button, the second occurring within a specified time after the first. The double-click time is the maximum
                number of
                milliseconds that may occur between the first and second click of a double-click.
            </summary>
            <returns>
                The return value specifies the current double-click time, in milliseconds.
            </returns>
            <remarks>
                http://msdn.microsoft.com/en-us/library/ms646258(VS.85).aspx
            </remarks>
        </member>
        <member name="T:Gma.System.MouseKeyHook.WinApi.MouseStruct">
            <summary>
                The <see cref="T:Gma.System.MouseKeyHook.WinApi.MouseStruct" /> structure contains information about a mouse input event.
            </summary>
            <remarks>
                See full documentation at http://globalmousekeyhook.codeplex.com/wikipage?title=MouseStruct
            </remarks>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.MouseStruct.Point">
            <summary>
                Specifies a Point structure that contains the X- and Y-coordinates of the cursor, in screen coordinates.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.MouseStruct.MouseData">
            <summary>
                Specifies information associated with the message.
            </summary>
            <remarks>
                The possible values are:
                <list type="bullet">
                    <item>
                        <description>0 - No Information</description>
                    </item>
                    <item>
                        <description>1 - X-Button1 Click</description>
                    </item>
                    <item>
                        <description>2 - X-Button2 Click</description>
                    </item>
                    <item>
                        <description>120 - Mouse Scroll Away from User</description>
                    </item>
                    <item>
                        <description>-120 - Mouse Scroll Toward User</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.MouseStruct.Timestamp">
            <summary>
                Returns a Timestamp associated with the input, in System Ticks.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.WinApi.KeyboardHookStruct">
            <summary>
                The KeyboardHookStruct structure contains information about a low-level keyboard input event.
            </summary>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookstructures/cwpstruct.asp
            </remarks>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardHookStruct.VirtualKeyCode">
            <summary>
                Specifies a virtual-key code. The code must be a value in the range 1 to 254.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardHookStruct.ScanCode">
            <summary>
                Specifies a hardware scan code for the key.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardHookStruct.Flags">
            <summary>
                Specifies the extended-key flag, event-injected flag, context code, and transition-state flag.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardHookStruct.Time">
            <summary>
                Specifies the Time stamp for this message.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardHookStruct.ExtraInfo">
            <summary>
                Specifies extra information associated with the message.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.WinApi.Point">
            <summary>
                The Point structure defines the X- and Y- coordinates of a point.
            </summary>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/gdi/rectangl_0tiq.asp
            </remarks>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Point.X">
            <summary>
                Specifies the X-coordinate of the point.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Point.Y">
            <summary>
                Specifies the Y-coordinate of the point.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.WinApi.HookProcedure">
            <summary>
                The CallWndProc hook procedure is an application-defined or library-defined callback
                function used with the SetWindowsHookEx function. The HOOKPROC type defines a pointer
                to this callback function. CallWndProc is a placeholder for the application-defined
                or library-defined function name.
            </summary>
            <param name="nCode">
                [in] Specifies whether the hook procedure must process the message.
                If nCode is HC_ACTION, the hook procedure must process the message.
                If nCode is less than zero, the hook procedure must pass the message to the
                CallNextHookEx function without further processing and must return the
                value returned by CallNextHookEx.
            </param>
            <param name="wParam">
                [in] Specifies whether the message was sent by the current thread.
                If the message was sent by the current thread, it is nonzero; otherwise, it is zero.
            </param>
            <param name="lParam">
                [in] Pointer to a CWPSTRUCT structure that contains details about the message.
            </param>
            <returns>
                If nCode is less than zero, the hook procedure must return the value returned by CallNextHookEx.
                If nCode is greater than or equal to zero, it is highly recommended that you call CallNextHookEx
                and return the value it returns; otherwise, other applications that have installed WH_CALLWNDPROC
                hooks will not receive hook notifications and may behave incorrectly as a result. If the hook
                procedure does not call CallNextHookEx, the return value should be zero.
            </returns>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/windowing/hooks/hookreference/hookfunctions/callwndproc.asp
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.TryGetCharFromKeyboardState(System.Int32,System.Int32,System.Char[]@)">
            <summary>
                Translates a virtual key to its character equivalent using the current keyboard layout without knowing the
                scancode in advance.
            </summary>
            <param name="virtualKeyCode"></param>
            <param name="fuState"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.TryGetCharFromKeyboardState(System.Int32,System.Int32,System.Int32,System.Char[]@)">
            <summary>
                Translates a virtual key to its character equivalent using the current keyboard layout
            </summary>
            <param name="virtualKeyCode"></param>
            <param name="scanCode"></param>
            <param name="fuState"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.TryGetCharFromKeyboardState(System.Int32,System.Int32,System.Int32,System.IntPtr,System.Char[]@)">
            <summary>
                Translates a virtual key to its character equivalent using a specified keyboard layout
            </summary>
            <param name="virtualKeyCode"></param>
            <param name="scanCode"></param>
            <param name="fuState"></param>
            <param name="dwhkl"></param>
            <param name="chars"></param>
            <returns></returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.GetActiveKeyboard">
            <summary>
                Gets the input locale identifier for the active application's thread.  Using this combined with the ToUnicodeEx and
                MapVirtualKeyEx enables Windows to properly translate keys based on the keyboard layout designated for the
                application.
            </summary>
            <returns>HKL</returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.ToAscii(System.Int32,System.Int32,System.Byte[],System.Byte[],System.Int32)">
            <summary>
                The ToAscii function translates the specified virtual-key code and keyboard
                state to the corresponding character or characters. The function translates the code
                using the input language and physical keyboard layout identified by the keyboard layout handle.
            </summary>
            <param name="uVirtKey">
                [in] Specifies the virtual-key code to be translated.
            </param>
            <param name="uScanCode">
                [in] Specifies the hardware scan code of the key to be translated.
                The high-order bit of this value is set if the key is up (not pressed).
            </param>
            <param name="lpbKeyState">
                [in] Pointer to a 256-byte array that contains the current keyboard state.
                Each element (byte) in the array contains the state of one key.
                If the high-order bit of a byte is set, the key is down (pressed).
                The low bit, if set, indicates that the key is toggled on. In this function,
                only the toggle bit of the CAPS LOCK key is relevant. The toggle state
                of the NUM LOCK and SCROLL LOCK keys is ignored.
            </param>
            <param name="lpwTransKey">
                [out] Pointer to the buffer that receives the translated character or characters.
            </param>
            <param name="fuState">
                [in] Specifies whether a menu is active. This parameter must be 1 if a menu is active, or 0 otherwise.
            </param>
            <returns>
                If the specified key is a dead key, the return value is negative. Otherwise, it is one of the following values.
                Value Meaning
                0 The specified virtual key has no translation for the current state of the keyboard.
                1 One character was copied to the buffer.
                2 Two characters were copied to the buffer. This usually happens when a dead-key character
                (accent or diacritic) stored in the keyboard layout cannot be composed with the specified
                virtual key to form a single character.
            </returns>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.ToUnicodeEx(System.Int32,System.Int32,System.Byte[],System.Text.StringBuilder,System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Translates the specified virtual-key code and keyboard state to the corresponding Unicode character or characters.
            </summary>
            <param name="wVirtKey">[in] The virtual-key code to be translated.</param>
            <param name="wScanCode">
                [in] The hardware scan code of the key to be translated. The high-order bit of this value is
                set if the key is up.
            </param>
            <param name="lpKeyState">
                [in, optional] A pointer to a 256-byte array that contains the current keyboard state. Each
                element (byte) in the array contains the state of one key. If the high-order bit of a byte is set, the key is down.
            </param>
            <param name="pwszBuff">
                [out] The buffer that receives the translated Unicode character or characters. However, this
                buffer may be returned without being null-terminated even though the variable name suggests that it is
                null-terminated.
            </param>
            <param name="cchBuff">[in] The size, in characters, of the buffer pointed to by the pwszBuff parameter.</param>
            <param name="wFlags">
                [in] The behavior of the function. If bit 0 is set, a menu is active. Bits 1 through 31 are
                reserved.
            </param>
            <param name="dwhkl">The input locale identifier used to translate the specified code.</param>
            <returns>
                -1 &lt;= return &lt;= n
                <list type="bullet">
                    <item>
                        -1    = The specified virtual key is a dead-key character (accent or diacritic). This value is returned
                        regardless of the keyboard layout, even if several characters have been typed and are stored in the
                        keyboard state. If possible, even with Unicode keyboard layouts, the function has written a spacing version
                        of the dead-key character to the buffer specified by pwszBuff. For example, the function writes the
                        character SPACING ACUTE (0x00B4), rather than the character NON_SPACING ACUTE (0x0301).
                    </item>
                    <item>
                        0    = The specified virtual key has no translation for the current state of the keyboard. Nothing was
                        written to the buffer specified by pwszBuff.
                    </item>
                    <item> 1    = One character was written to the buffer specified by pwszBuff.</item>
                    <item>
                        n    = Two or more characters were written to the buffer specified by pwszBuff. The most common cause
                        for this is that a dead-key character (accent or diacritic) stored in the keyboard layout could not be
                        combined with the specified virtual key to form a single character. However, the buffer may contain more
                        characters than the return value specifies. When this happens, any extra characters are invalid and should
                        be ignored.
                    </item>
                </list>
            </returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.GetKeyboardState(System.Byte[])">
            <summary>
                The GetKeyboardState function copies the status of the 256 virtual keys to the
                specified buffer.
            </summary>
            <param name="pbKeyState">
                [in] Pointer to a 256-byte array that contains keyboard key states.
            </param>
            <returns>
                If the function succeeds, the return value is nonzero.
                If the function fails, the return value is zero. To get extended error information, call GetLastError.
            </returns>
            <remarks>
                http://msdn.microsoft.com/library/default.asp?url=/library/en-us/winui/winui/windowsuserinterface/userinput/keyboardinput/keyboardinputreference/keyboardinputfunctions/toascii.asp
            </remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.GetKeyState(System.Int32)">
            <summary>
                The GetKeyState function retrieves the status of the specified virtual key. The status specifies whether the key is
                up, down, or toggled
                (on, off—alternating each time the key is pressed).
            </summary>
            <param name="vKey">
                [in] Specifies a virtual key. If the desired virtual key is a letter or digit (A through Z, a through z, or 0
                through 9), nVirtKey must be set to the ASCII value of that character. For other keys, it must be a virtual-key
                code.
            </param>
            <returns>
                The return value specifies the status of the specified virtual key, as follows:
                If the high-order bit is 1, the key is down; otherwise, it is up.
                If the low-order bit is 1, the key is toggled. A key, such as the CAPS LOCK key, is toggled if it is turned on. The
                key is off and untoggled if the low-order bit is 0. A toggle key's indicator light (if any) on the keyboard will be
                on when the key is toggled, and off when the key is untoggled.
            </returns>
            <remarks>http://msdn.microsoft.com/en-us/library/ms646301.aspx</remarks>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.MapVirtualKeyEx(System.Int32,System.Int32,System.IntPtr)">
            <summary>
                Translates (maps) a virtual-key code into a scan code or character value, or translates a scan code into a
                virtual-key code.
            </summary>
            <param name="uCode">
                [in] The virtual key code or scan code for a key. How this value is interpreted depends on the
                value of the uMapType parameter.
            </param>
            <param name="uMapType">
                [in] The translation to be performed. The value of this parameter depends on the value of the
                uCode parameter.
            </param>
            <param name="dwhkl">[in] The input locale identifier used to translate the specified code.</param>
            <returns></returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.GetKeyboardLayout(System.Int32)">
            <summary>
                Retrieves the active input locale identifier (formerly called the keyboard layout) for the specified thread.
                If the idThread parameter is zero, the input locale identifier for the active thread is returned.
            </summary>
            <param name="dwLayout">[in] The identifier of the thread to query, or 0 for the current thread. </param>
            <returns>
                The return value is the input locale identifier for the thread. The low word contains a Language Identifier for the
                input
                language and the high word contains a device handle to the physical layout of the keyboard.
            </returns>
        </member>
        <member name="T:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.MapType">
            <summary>
                MapVirtualKeys uMapType
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.MapType.MAPVK_VK_TO_VSC">
            <summary>
                uCode is a virtual-key code and is translated into an unshifted character value in the low-order word of the return
                value. Dead keys (diacritics) are indicated by setting the top bit of the return value. If there is no translation,
                the function returns 0.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.MapType.MAPVK_VSC_TO_VK">
            <summary>
                uCode is a virtual-key code and is translated into a scan code. If it is a virtual-key code that does not
                distinguish between left- and right-hand keys, the left-hand scan code is returned. If there is no translation, the
                function returns 0.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.MapType.MAPVK_VK_TO_CHAR">
            <summary>
                uCode is a scan code and is translated into a virtual-key code that does not distinguish between left- and
                right-hand keys. If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.KeyboardNativeMethods.MapType.MAPVK_VSC_TO_VK_EX">
            <summary>
                uCode is a scan code and is translated into a virtual-key code that distinguishes between left- and right-hand
                keys. If there is no translation, the function returns 0.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_MOUSEMOVE">
            <summary>
                The WM_MOUSEMOVE message is posted to a window when the cursor moves.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_LBUTTONDOWN">
            <summary>
                The WM_LBUTTONDOWN message is posted when the user presses the left mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_RBUTTONDOWN">
            <summary>
                The WM_RBUTTONDOWN message is posted when the user presses the right mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_MBUTTONDOWN">
            <summary>
                The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_LBUTTONUP">
            <summary>
                The WM_LBUTTONUP message is posted when the user releases the left mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_RBUTTONUP">
            <summary>
                The WM_RBUTTONUP message is posted when the user releases the right mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_MBUTTONUP">
            <summary>
                The WM_MBUTTONUP message is posted when the user releases the middle mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_LBUTTONDBLCLK">
            <summary>
                The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_RBUTTONDBLCLK">
            <summary>
                The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_MBUTTONDBLCLK">
            <summary>
                The WM_RBUTTONDOWN message is posted when the user presses the right mouse button
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_MOUSEWHEEL">
            <summary>
                The WM_MOUSEWHEEL message is posted when the user presses the mouse wheel.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_XBUTTONDOWN">
            <summary>
                The WM_XBUTTONDOWN message is posted when the user presses the first or second X mouse
                button.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_XBUTTONUP">
            <summary>
                The WM_XBUTTONUP message is posted when the user releases the first or second X  mouse
                button.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_XBUTTONDBLCLK">
            <summary>
                The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second
                X mouse button.
            </summary>
            <remarks>Only windows that have the CS_DBLCLKS style can receive WM_XBUTTONDBLCLK messages.</remarks>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_MOUSEHWHEEL">
            <summary>
                The WM_MOUSEHWHEEL message Sent to the active window when the mouse's horizontal scroll
                wheel is tilted or rotated.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_KEYDOWN">
            <summary>
                The WM_KEYDOWN message is posted to the window with the keyboard focus when a non-system
                key is pressed. A non-system key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_KEYUP">
            <summary>
                The WM_KEYUP message is posted to the window with the keyboard focus when a non-system
                key is released. A non-system key is a key that is pressed when the ALT key is not pressed,
                or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_SYSKEYDOWN">
            <summary>
                The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user
                presses the F10 key (which activates the menu bar) or holds down the ALT key and then
                presses another key. It also occurs when no window currently has the keyboard focus;
                in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that
                receives the message can distinguish between these two contexts by checking the context
                code in the lParam parameter.
            </summary>
        </member>
        <member name="F:Gma.System.MouseKeyHook.WinApi.Messages.WM_SYSKEYUP">
            <summary>
                The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user
                releases a key that was pressed while the ALT key was held down. It also occurs when no
                window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent
                to the active window. The window that receives the message can distinguish between
                these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.ThreadNativeMethods.GetCurrentThreadId">
            <summary>
                Retrieves the unmanaged thread identifier of the calling thread.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.ThreadNativeMethods.GetForegroundWindow">
            <summary>
                Retrieves a handle to the foreground window (the window with which the user is currently working).
                The system assigns a slightly higher priority to the thread that creates the foreground window than it does to
                other threads.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.WinApi.ThreadNativeMethods.GetWindowThreadProcessId(System.IntPtr,System.Int32@)">
            <summary>
                Retrieves the identifier of the thread that created the specified window and, optionally, the identifier of the
                process that
                created the window.
            </summary>
            <param name="handle">A handle to the window. </param>
            <param name="processId">
                A pointer to a variable that receives the process identifier. If this parameter is not NULL,
                GetWindowThreadProcessId copies the identifier of the process to the variable; otherwise, it does not.
            </param>
            <returns>The return value is the identifier of the thread that created the window. </returns>
        </member>
        <member name="T:Gma.System.MouseKeyHook.KeyEventArgsExt">
            <summary>
                Provides extended argument data for the <see cref='E:Gma.System.MouseKeyHook.Implementation.KeyListener.KeyDown' /> or
                <see cref='E:Gma.System.MouseKeyHook.Implementation.KeyListener.KeyUp' /> event.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.KeyEventArgsExt.#ctor(System.Windows.Forms.Keys)">
            <summary>
                Initializes a new instance of the <see cref="T:Gma.System.MouseKeyHook.KeyEventArgsExt" /> class.
            </summary>
            <param name="keyData"></param>
        </member>
        <member name="P:Gma.System.MouseKeyHook.KeyEventArgsExt.Timestamp">
            <summary>
                The system tick count of when the event occurred.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.KeyEventArgsExt.IsKeyDown">
            <summary>
                True if event signals key down..
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.KeyEventArgsExt.IsKeyUp">
            <summary>
                True if event signals key up.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.MouseEventExtArgs">
            <summary>
                Provides extended data for the MouseClickExt and MouseMoveExt events.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.MouseEventExtArgs.#ctor(System.Windows.Forms.MouseButtons,System.Int32,Gma.System.MouseKeyHook.WinApi.Point,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:Gma.System.MouseKeyHook.MouseEventExtArgs" /> class.
            </summary>
            <param name="buttons">One of the MouseButtons values indicating which mouse button was pressed.</param>
            <param name="clicks">The number of times a mouse button was pressed.</param>
            <param name="point">The x and y coordinate of a mouse click, in pixels.</param>
            <param name="delta">A signed count of the number of detents the wheel has rotated.</param>
            <param name="timestamp">The system tick count when the event occurred.</param>
            <param name="isMouseButtonDown">True if event signals mouse button down.</param>
            <param name="isMouseButtonUp">True if event signals mouse button up.</param>
        </member>
        <member name="P:Gma.System.MouseKeyHook.MouseEventExtArgs.Handled">
            <summary>
                Set this property to <b>true</b> inside your event handler to prevent further processing of the event in other
                applications.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.MouseEventExtArgs.WheelScrolled">
            <summary>
                True if event contains information about wheel scroll.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.MouseEventExtArgs.Clicked">
            <summary>
                True if event signals a click. False if it was only a move or wheel scroll.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.MouseEventExtArgs.IsMouseButtonDown">
            <summary>
                True if event signals mouse button down.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.MouseEventExtArgs.IsMouseButtonUp">
            <summary>
                True if event signals mouse button up.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.MouseEventExtArgs.Timestamp">
            <summary>
                The system tick count of when the event occurred.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.MouseEventExtArgs.Point">
            <summary>
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.MouseEventExtArgs.FromRawDataUniversal(System.IntPtr,Gma.System.MouseKeyHook.WinApi.MouseStruct)">
            <summary>
                Creates <see cref="T:Gma.System.MouseKeyHook.MouseEventExtArgs" /> from relevant mouse data.
            </summary>
            <param name="wParam">First Windows Message parameter.</param>
            <param name="mouseInfo">A MouseStruct containing information from which to construct MouseEventExtArgs.</param>
            <returns>A new MouseEventExtArgs object.</returns>
        </member>
        <member name="T:Gma.System.MouseKeyHook.HotKeys.HotKeyArgs">
            <summary>
                The event arguments passed when a HotKeySet's OnHotKeysDownHold event is triggered.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeyArgs.#ctor(System.DateTime)">
            <summary>
                Creates an instance of the HotKeyArgs.
                <param name="triggeredAt">Time when the event was triggered</param>
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.HotKeys.HotKeyArgs.Time">
            <summary>
                Time when the event was triggered
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.HotKeys.HotKeySet">
            <summary>
                An immutable set of Hot Keys that provides an event for when the set is activated.
            </summary>
        </member>
        <member name="T:Gma.System.MouseKeyHook.HotKeys.HotKeySet.HotKeyHandler">
            <summary>
                A delegate representing the signature for the OnHotKeysDownHold event
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.#ctor(System.Collections.Generic.IEnumerable{System.Windows.Forms.Keys})">
            <summary>
                Creates an instance of the HotKeySet class.  Once created, the keys cannot be changed.
            </summary>
            <param name="hotkeys">Set of Hot Keys</param>
        </member>
        <member name="P:Gma.System.MouseKeyHook.HotKeys.HotKeySet.Name">
            <summary>
                Enables the ability to name the set
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.HotKeys.HotKeySet.Description">
            <summary>
                Enables the ability to describe what the set is used for or supposed to do
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.HotKeys.HotKeySet.HotKeys">
            <summary>
                Gets the set of hotkeys that this class handles.
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.HotKeys.HotKeySet.HotKeysActivated">
            <summary>
                Returns whether the set of Keys is activated
            </summary>
        </member>
        <member name="P:Gma.System.MouseKeyHook.HotKeys.HotKeySet.Enabled">
            <summary>
                Gets or sets the enabled state of the HotKey set.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.HotKeys.HotKeySet.OnHotKeysDownHold">
            <summary>
                Called as the user holds down the keys in the set.  It is NOT triggered the first time the keys are set.
                <see cref="E:Gma.System.MouseKeyHook.HotKeys.HotKeySet.OnHotKeysDownOnce" />
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.HotKeys.HotKeySet.OnHotKeysUp">
            <summary>
                Called whenever the hot key set is no longer active.  This is essentially a KeyPress event, indicating that a full
                key cycle has occurred, only for HotKeys because a single key removed from the set constitutes an incomplete set.
            </summary>
        </member>
        <member name="E:Gma.System.MouseKeyHook.HotKeys.HotKeySet.OnHotKeysDownOnce">
            <summary>
                Called the first time the down keys are set.  It does not get called throughout the duration the user holds it but
                only the
                first time it's activated.
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.InvokeHotKeyHandler(Gma.System.MouseKeyHook.HotKeys.HotKeySet.HotKeyHandler)">
            <summary>
                General invocation handler
            </summary>
            <param name="hotKeyDelegate"></param>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.InitializeKeys">
            <summary>
                Adds the keys into the dictionary tracking the keys and gets the real-time status of the Keys
                from the OS
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.UnregisterExclusiveOrKey(System.Windows.Forms.Keys)">
            <summary>
                Unregisters a previously set exclusive or based on the primary key.
            </summary>
            <param name="anyKeyInTheExclusiveOrSet">Any key used in the Registration method used to create an exclusive or set</param>
            <returns>
                True if successful.  False doesn't indicate a failure to unregister, it indicates that the Key is not
                registered as an Exclusive Or key or it's not the Primary Key.
            </returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.RegisterExclusiveOrKey(System.Collections.Generic.IEnumerable{System.Windows.Forms.Keys})">
            <summary>
                Registers a group of Keys that are already part of the HotKeySet in order to provide better flexibility among keys.
                <example>
                    <code>
             HotKeySet hks = new HotKeySet( new [] { Keys.T, Keys.LShiftKey, Keys.RShiftKey } );
             RegisterExclusiveOrKey( new [] { Keys.LShiftKey, Keys.RShiftKey } );
             </code>
                    allows either Keys.LShiftKey or Keys.RShiftKey to be combined with Keys.T.
                </example>
            </summary>
            <param name="orKeySet"></param>
            <returns>Primary key used for mapping or Keys.None on error</returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.GetExclusiveOrPrimaryKey(System.Windows.Forms.Keys)">
            <summary>
                Gets the primary key
            </summary>
            <param name="k"></param>
            <returns>The primary key if it exists, otherwise Keys.None</returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.GetPrimaryKey(System.Windows.Forms.Keys)">
            <summary>
                Resolves obtaining the key used for state checking.
            </summary>
            <param name="k"></param>
            <returns>The primary key if it exists, otherwise the key entered</returns>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySet.OnKey(Gma.System.MouseKeyHook.KeyEventArgsExt)">
            <summary>
            </summary>
            <param name="kex"></param>
        </member>
        <member name="T:Gma.System.MouseKeyHook.HotKeys.HotKeySetCollection">
            <summary>
                A collection of HotKeySets
            </summary>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySetCollection.Add(Gma.System.MouseKeyHook.HotKeys.HotKeySet)">
            <summary>
                Adds a HotKeySet to the collection.
            </summary>
            <param name="hks"></param>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySetCollection.Remove(Gma.System.MouseKeyHook.HotKeys.HotKeySet)">
            <summary>
                Removes the HotKeySet from the collection.
            </summary>
            <param name="hks"></param>
        </member>
        <member name="M:Gma.System.MouseKeyHook.HotKeys.HotKeySetCollection.OnKey(Gma.System.MouseKeyHook.KeyEventArgsExt)">
            <summary>
                Uses a multi-case delegate to invoke individual HotKeySets if the Key is in use by any HotKeySets.
            </summary>
            <param name="e"></param>
        </member>
    </members>
</doc>
